<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Soko</title>
    <script type="text/javascript" src="js/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>

<body>

<script type="text/javascript">
    window.onload = function () {

        // game definition, 320x320
        var game = new Phaser.Game(320, 320, Phaser.CANVAS, "", {
            preload: onPreload,
            create: onCreate
        });


        // sokoban level, using hardcoded values rather than constants to save time, shame on me :) 
        var level = [];

        var dimension = 25;
        for(var i=0;i<dimension;i++){
            level[i] = [];
            for(var j=0;j<dimension;j++){
                level[i][j] = [];
            }
        }

        // size of a tile, in pixels
        var tileSize = 40;

        // the player! Yeah!
        var player;

        // variables used to detect and manage swipes
        var startX;
        var startY;
        var endX;
        var endY;

        // first function to be called, when the game preloads I am loading the sprite sheet with all game tiles
        function onPreload() {
            game.load.spritesheet("tiles", "tiles.png", 40, 40);
        }

        // function to scale up the game to full screen
        function goFullScreen() {
            game.scale.pageAlignHorizontally = true;
            game.scale.pageAlignVertically = true;
            game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            game.scale.refresh();
        }

        // function to be called when the game has been created
        function onCreate() {
            // going full screen with the function defined at line 32
            goFullScreen();

            var fixedGroup = game.add.group();
            var movingGroup = game.add.group();
            // variable used for tile creation
            var tile;
            
            // once the level has been created, we wait for the player to touch or click, then we call
            // beginSwipe function
            game.input.onDown.add(beginSwipe, this);
        }

        var count = 0;

        function update(){

            count++;
            if(count%100 == 0){
                level[Math.floor(Math.random()*dimension)][Math.floor(Math.random()*dimension)].push(true);
            }

            for (var i = 0; i < level.length; i++) {

                // looping through all level columns
                for (var j = 0; j < level[i].length; j++) {

                    if(level[i][j].length){
                        
                    }

                }
            }
        }

        // when the player begins to swipe we only save mouse/finger coordinates, remove the touch/click
        // input listener and add a new listener to be fired when the mouse/finger has been released,
        // then we call endSwipe function
        function beginSwipe() {
            startX = game.input.worldX;
            startY = game.input.worldY;
            game.input.onDown.remove(beginSwipe);
            game.input.onUp.add(endSwipe);
        }

        // function to be called when the player releases the mouse/finger
        function endSwipe() {
            // saving mouse/finger coordinates
            endX = game.input.worldX;
            endY = game.input.worldY;
            // determining x and y distance travelled by mouse/finger from the start
            // of the swipe until the end
            var distX = startX - endX;
            var distY = startY - endY;
            // in order to have an horizontal swipe, we need that x distance is at least twice the y distance
            // and the amount of horizontal distance is at least 10 pixels
            if (Math.abs(distX) > Math.abs(distY) * 2 && Math.abs(distX) > 10) {
                // moving left, calling move function with horizontal and vertical tiles to move as arguments
                if (distX > 0) {
                    // move(-1, 0);
                }
                // moving right, calling move function with horizontal and vertical tiles to move as arguments
                else {
                    // move(1, 0);
                }
            }
            // in order to have a vertical swipe, we need that y distance is at least twice the x distance
            // and the amount of vertical distance is at least 10 pixels
            if (Math.abs(distY) > Math.abs(distX) * 2 && Math.abs(distY) > 10) {
                // moving up, calling move function with horizontal and vertical tiles to move as arguments
                if (distY > 0) {
                    // move(0, -1);
                }
                // moving down, calling move function with horizontal and vertical tiles to move as arguments
                else {
                    // move(0, 1);
                }
            }
            // stop listening for the player to release finger/mouse, let's start listening for the player to click/touch
            game.input.onDown.add(beginSwipe);
            game.input.onUp.remove(endSwipe);
        }

    }
</script>

</body>

</html>